{%- let module_name = self.config.project.name_upper_camel() %}
{%- let spec_jsi = self.config.project.tm.spec_name()|fmt("{}JSI") %}
{%- let ns = self.config.project.cpp_namespace() %}
{%- let uniffi_ns = "uniffi_generated" %}
{%- let fn_prefix = "__hostFunction_{}"|format(module_name) -%}
// Generated by uniffi-bindgen-react-native
#import "{{ module_name }}.h"

namespace {{ uniffi_ns }} {
    using namespace facebook::react;
    /**
    * ObjC++ class for module '{{ self.config.project.codegen_filename() }}'
    */
    class JSI_EXPORT {{ spec_jsi }} : public ObjCTurboModule {
    public:
        {{ spec_jsi }}(const ObjCTurboModule::InitParams &params);
        std::shared_ptr<CallInvoker> callInvoker;
    };

    // TODO Remove `multiply` after seeing this work on iOS and Android.
    static facebook::jsi::Value {{ fn_prefix }}_multiply(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, "multiply", @selector(multiply:b:), args, count);
    }
    static facebook::jsi::Value {{ fn_prefix }}_installRustCrate(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
        auto& tm = static_cast<{{ spec_jsi }}&>(turboModule);
        auto jsInvoker = tm.callInvoker;
        uint8_t result = {{ ns }}::installRustCrate(rt, jsInvoker);
        return facebook::jsi::Value(rt, result);
    }
    static facebook::jsi::Value {{ fn_prefix }}_cleanupRustCrate(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
        uint8_t a = 0;
        uint8_t result = {{ ns }}::cleanupRustCrate(rt, a);
        return facebook::jsi::Value(rt, result);
    }

    {{ spec_jsi }}::{{ spec_jsi }}(const ObjCTurboModule::InitParams &params)
        : ObjCTurboModule(params), callInvoker(params.jsInvoker) {
            // TODO Remove `multiply` after seeing this work on iOS and Android.
            this->methodMap_["multiply"] = MethodMetadata {2, {{ fn_prefix }}_multiply};
            this->methodMap_["installRustCrate"] = MethodMetadata {1, {{ fn_prefix }}_installRustCrate};
            this->methodMap_["cleanupRustCrate"] = MethodMetadata {1, {{ fn_prefix }}_cleanupRustCrate};
    }
} // namespace {{ uniffi_ns }}

@implementation {{ module_name }}
RCT_EXPORT_MODULE()

// Don't compile this code when we build for the old architecture.
#ifdef RCT_NEW_ARCH_ENABLED
// TODO Remove `multiply` after seeing this work on iOS and Android.
- (NSNumber *)multiply:(double)a b:(double)b {
    NSNumber *result = @({{ ns }}::multiply(a, b));

    return result;
}

- (NSNumber *)installRustCrate:(bool)a {
    @throw [NSException exceptionWithName:@"UnreachableException"
                        reason:@"This method should never be called."
                        userInfo:nil];
}

- (NSNumber *)cleanupRustCrate:(bool)a {
    @throw [NSException exceptionWithName:@"UnreachableException"
                        reason:@"This method should never be called."
                        userInfo:nil];
}

- (std::shared_ptr<facebook::react::TurboModule>)getTurboModule:
    (const facebook::react::ObjCTurboModule::InitParams &)params
{
    return std::make_shared<{{ uniffi_ns }}::{{ spec_jsi }}>(params);
}
#endif

@end
