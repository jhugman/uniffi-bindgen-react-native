{%- let android = self.config.project.android.clone() %}
{%- let name = self.config.project.name_upper_camel() %}
{%- let module_class_name = name|fmt("{}Module") -%}
// Generated by uniffi-bindgen-react-native
package {{ android.package_name }};

import androidx.annotation.NonNull;

import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.module.annotations.ReactModule;
import com.facebook.react.turbomodule.core.interfaces.CallInvokerHolder;

@ReactModule(name = {{ module_class_name }}.NAME)
public class {{ module_class_name }} extends {{ self.config.project.tm.spec_name() }} {
  public static final String NAME = "{{ name }}";

  public {{ module_class_name }}(ReactApplicationContext reactContext) {
    super(reactContext);
  }

  @Override
  @NonNull
  public String getName() {
    return NAME;
  }

  static {
    System.loadLibrary("{{ self.config.project.cpp_filename() }}");
  }

  // TODO Remove `multiply` after seeing this work on iOS and Android.
  private static native double nativeMultiply(double a, double b);
  private static native boolean nativeInstallRustCrate(long rtPtr, CallInvokerHolder callInvoker);
  private static native boolean nativeCleanupRustCrate(long rtPtr, boolean a);

  @Override
  public double multiply(double a, double b) {
    return nativeMultiply(a, b);
  }

  @Override
  public boolean installRustCrate(boolean rt) {
    ReactApplicationContext context = getReactApplicationContext();
    return nativeInstallRustCrate(
      context.getJavaScriptContextHolder().get(),
      context.getCatalystInstance().getJSCallInvokerHolder()
    );
  }

  @Override
  public boolean cleanupRustCrate(boolean rt) {
    return nativeCleanupRustCrate(
      this.getReactApplicationContext().getJavaScriptContextHolder().get(),
      rt
    );
  }
}
