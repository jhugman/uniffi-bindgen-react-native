// Generated by uniffi-bindgen-react-native
#include <jni.h>
#include <jsi/jsi.h>
#include <ReactCommon/CallInvokerHolder.h>
#include "{{ self.config.project.cpp_filename() }}.h"
{%- let package_name = self.config.project.android.package_name().replace(".", "_") %}
{%- let name = self.config.project.module_cpp() %}
{%- let module_class_name = name|fmt("{}Module") %}
{%- let prefix = "Java_{}_{}"|format(package_name, module_class_name) %}
{%- let ns = self.config.project.cpp_namespace() %}

namespace jsi = facebook::jsi;
namespace react = facebook::react;

// Automated testing checks {{ prefix }} and {{ ns }}
// by comparing the whole line here.
/*
{{ prefix }}_nativeMultiply(JNIEnv *env, jclass type, jdouble a, jdouble b) {
    return {{ ns }}::multiply(a, b);
}
*/

// Installer coming from {{ module_class_name }}
extern "C"
JNIEXPORT jboolean JNICALL
{{ prefix }}_nativeInstallRustCrate(
    JNIEnv *env,
    jclass type,
    jlong rtPtr,
    jobject callInvokerHolderJavaObj
) {
    using JCallInvokerHolder = facebook::react::CallInvokerHolder;

    auto holderLocal = facebook::jni::make_local(callInvokerHolderJavaObj);
    auto holderRef = facebook::jni::static_ref_cast<JCallInvokerHolder::javaobject>(holderLocal);
    auto* holderCxx = holderRef->cthis();
    auto jsCallInvoker = holderCxx->getCallInvoker();
    auto runtime = reinterpret_cast<jsi::Runtime *>(rtPtr);

    return {{ ns }}::installRustCrate(*runtime, jsCallInvoker);
}

extern "C"
JNIEXPORT jboolean JNICALL
{{ prefix }}_nativeCleanupRustCrate(JNIEnv *env, jclass type, jlong rtPtr) {
    auto runtime = reinterpret_cast<jsi::Runtime *>(rtPtr);
    return {{ ns }}::cleanupRustCrate(*runtime);
}
