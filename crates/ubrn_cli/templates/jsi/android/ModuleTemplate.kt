{%- let android = self.config.project.android.clone() %}
{%- let name = self.config.project.module_cpp() %}
{%- let module_class_name = name|fmt("{}Module") -%}
// Generated by uniffi-bindgen-react-native
package {{ android.package_name() }}

import com.facebook.react.bridge.ReactApplicationContext
import com.facebook.react.module.annotations.ReactModule
import com.facebook.react.turbomodule.core.interfaces.CallInvokerHolder

@ReactModule(name = {{ module_class_name }}.NAME)
class {{ module_class_name }}(reactContext: ReactApplicationContext) :
  {{ self.config.project.codegen_filename() }}Spec(reactContext) {

  override fun getName(): String {
    return NAME
  }

  // Two native methods implemented in cpp-adapter.cpp, and ultimately
  // {{ self.config.project.cpp_filename() }}.cpp

  external fun nativeInstallRustCrate(runtimePointer: Long, callInvoker: CallInvokerHolder): Boolean
  external fun nativeCleanupRustCrate(runtimePointer: Long): Boolean

  override fun installRustCrate(): Boolean {
    val context = this.reactApplicationContext
    return nativeInstallRustCrate(
      context.javaScriptContextHolder!!.get(),
      context.jsCallInvokerHolder!!
    )
  }

  override fun cleanupRustCrate(): Boolean {
    return nativeCleanupRustCrate(
      this.reactApplicationContext.javaScriptContextHolder!!.get()
    )
  }

  companion object {
    const val NAME = "{{ name }}"

    init {
      System.loadLibrary("{{ self.config.project.cpp_filename() }}")
    }
  }
}
